{"version":3,"sources":["../src/livy_ctrl.js"],"names":["PanelCtrl","_","panelDefaults","rmServer","livyServer","submitJar","jobClassName","satTemplateVar","showJobList","driverMemory","driverCores","executorMemory","executorCores","numExecutors","dynamicAllocation","LivyCtrl","$scope","$injector","$http","defaults","panel","serverState","events","on","onInitEditMode","bind","livyJobs","frameworks","skipCleanupIds","updateJobs","addEditorTab","activeIds","concat","localStorage","keys","filter","k","startsWith","differenceWith","a","b","each","removeItem","session","id","appId","sparkUiUrl","appInfo","state","args","JSON","parse","getItem","framework","startTime","registered_time","endTime","unregistered_time","tasks","completed_tasks","unreachable_tasks","labels","chain","find","get","flatten","mapKeys","mapValues","value","taskStats","countBy","_getState","active","length","idx","slice","name","isRunning","isComplete","totalTime","Date","getTime","activeTasks","failedTasks","killedTasks","finishedTasks","resources","batches","then","ids","map","response","data","sessions","_cleanupStorage","_makeLivyJobModel","orderBy","_makeFrameworkModel","completed","completed_frameworks","$timeout","dashboard","time","from","requestState","_escapeLabel","toString","v","replace","_makeLabel","timeFrom","format","timeTo","to","sat","templating","list","current","options","join","values","request","post","submitted","push","setItem","stringify","delete","templateUrl"],"mappings":"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","file":"livy_ctrl.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\r\nimport _ from 'lodash'\r\n\r\nconst panelDefaults = {\r\n  rmServer: 'http://mesos-host:5050',\r\n  livyServer: 'http://livy-host:8999',\r\n  submitJar: 'hdfs:///path/to/file.jar',\r\n  jobClassName: 'com.full.job.ClassName',\r\n  satTemplateVar: 'sat',\r\n  showJobList: true,\r\n  driverMemory: '1g',\r\n  driverCores: 2,\r\n  executorMemory: '2g',\r\n  executorCores: 2,\r\n  numExecutors: 3,\r\n  dynamicAllocation: false\r\n};\r\n\r\nexport class LivyCtrl extends PanelCtrl {\r\n  constructor($scope, $injector, $http) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, panelDefaults);\r\n\r\n    this.$http = $http;\r\n    this.serverState = 'connecting';\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\r\n    this.livyJobs = [];\r\n    this.frameworks = [];\r\n    this.skipCleanupIds = [];\r\n\r\n    this.updateJobs();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/plugins/livy-panel/editor.html', 2);\r\n  }\r\n\r\n  _cleanupStorage(activeIds) {\r\n    activeIds = _.concat(activeIds, this.skipCleanupIds);\r\n    this.skipCleanupIds = [];\r\n\r\n    _(localStorage)\r\n      .keys()\r\n      .filter(k => k.startsWith('livy'))\r\n      .differenceWith(activeIds, (a, b) => a == 'livy-' + b)\r\n      .each(k => localStorage.removeItem(k));\r\n  }\r\n\r\n  _makeLivyJobModel(session) {\r\n    return {\r\n      id: session.id,\r\n      appId: session.appId,\r\n      sparkUiUrl: session.appInfo.sparkUiUrl,\r\n      state: session.state,\r\n      args: JSON.parse(localStorage.getItem('livy-' + session.id))\r\n    }\r\n  }\r\n\r\n  _makeFrameworkModel(framework) {\r\n    let startTime = framework.registered_time * 1000;\r\n    let endTime = framework.unregistered_time * 1000;\r\n\r\n    let tasks = _.concat(framework.tasks, framework.completed_tasks, framework.unreachable_tasks);\r\n    let labels = _.chain(tasks)\r\n      .find('labels').get('labels').flatten()\r\n      .mapKeys('key').mapValues('value')\r\n      .value();\r\n\r\n    let taskStats = _.countBy(tasks, 'state');\r\n\r\n    let _getState = () => {\r\n      if (framework.active) {\r\n          return framework.tasks.length > 0 ? 'running' : 'idle';\r\n      }\r\n      else if (framework.unregistered_time > 0) {\r\n          if (taskStats['TASK_FAILED'] > 0) return 'error';\r\n          if (taskStats['TASK_KILLED'] > 0) return 'dead';\r\n\r\n          return 'success';\r\n      }\r\n\r\n      return 'not_started';\r\n    };\r\n\r\n    return {\r\n      id: framework.id,\r\n      idx: framework.id.slice(-4),\r\n      name: framework.name,\r\n      startTime: startTime,\r\n      endTime: endTime,\r\n      isRunning: endTime == 0,\r\n      isComplete: endTime > 0,\r\n      totalTime: (endTime || (new Date()).getTime()) - startTime,\r\n      activeTasks: (taskStats['TASK_RUNNING'] || 0) + (taskStats['TASK_STARTING'] || 0),\r\n      failedTasks: taskStats['TASK_FAILED'] || 0,\r\n      killedTasks: taskStats['TASK_KILLED'] || 0,\r\n      finishedTasks: taskStats['TASK_FINISHED'] || 0,\r\n      resources: framework.resources,\r\n      state: _getState(),\r\n      args: labels,\r\n    }\r\n  }\r\n\r\n  updateJobs() {\r\n    if (this.panel.showJobList) {\r\n      let batches = this.$http.get(this.panel.livyServer + '/batches');\r\n      let frameworks = this.$http.get(this.panel.rmServer + '/frameworks');\r\n\r\n      batches.then(\r\n        response => {\r\n          let ids = _.map(response.data.sessions, 'id');\r\n          this._cleanupStorage(ids);\r\n          this.livyJobs = _.map(response.data.sessions, this._makeLivyJobModel);\r\n          this.serverState = 'online';\r\n        },\r\n        error => this.serverState = 'offline');\r\n\r\n      frameworks.then(response => {\r\n        let active = _(response.data.frameworks).orderBy('registered_time', 'desc').map(this._makeFrameworkModel);\r\n        let completed = _(response.data.completed_frameworks).orderBy('unregistered_time', 'desc').map(this._makeFrameworkModel);\r\n        this.frameworks = _.concat(active.value(), completed.value());\r\n      }, error => this.serverState = 'offline');\r\n    }\r\n    else {\r\n      this.$http.get(this.panel.livyServer + '/ping').then(response => this.serverState = 'online', error => this.serverState = 'offline');\r\n    }\r\n\r\n    this.$timeout(() => this.updateJobs(), 3000);\r\n  }\r\n\r\n  canSubmit() {\r\n    return typeof(this.dashboard.time.from) === \"object\" && this.serverState === 'online' && this.requestState !== 'pending';\r\n  }\r\n\r\n  submitJob() {\r\n    let _escapeLabel = v => _.toString(v).replace(/,/g, '\\\\,').replace(/:/g, '\\\\:');\r\n    let _makeLabel = (v, k) => _escapeLabel(k) + ':' + _escapeLabel(v);\r\n\r\n    let args = {\r\n      timeFrom: this.dashboard.time.from.format('x'),\r\n      timeTo: this.dashboard.time.to.format('x'),\r\n      sat: _.find(this.dashboard.templating.list, {name: this.panel.satTemplateVar}).current.value,\r\n    };\r\n\r\n    let options = {\r\n      \"file\": this.panel.submitJar,\r\n      \"className\": this.panel.jobClassName,\r\n      \"driverMemory\": this.panel.driverMemory,\r\n      \"driverCores\": this.panel.driverCores,\r\n      \"executorMemory\": this.panel.executorMemory,\r\n      \"executorCores\": this.panel.executorCores,\r\n      \"numExecutors\": this.panel.numExecutors,\r\n      \"conf\": {\r\n        \"spark.dynamicAllocation.enabled\": this.panel.dynamicAllocation,\r\n        \"spark.mesos.task.labels\": _.map(args, _makeLabel).join(',')\r\n      },\r\n      \"args\": _.values(args)\r\n    };\r\n\r\n  \tlet request = this.$http.post(this.panel.livyServer + '/batches', options);\r\n\r\n    this.serverState = 'pending';\r\n\r\n    request.then(\r\n      response => {\r\n        this.serverState = 'success';\r\n\r\n        if (response.data.id) {\r\n          args.submitted = (new Date()).getTime();\r\n          this.livyJobs.push(this._makeLivyJobModel(response.data));\r\n          this.skipCleanupIds.push(response.data.id);\r\n          localStorage.setItem(\"livy-\" + response.data.id, JSON.stringify(args));\r\n        }\r\n      },\r\n      error => this.serverState = 'error');\r\n  }\r\n\r\n  killBatch(id) {\r\n    let request = this.$http.delete(this.panel.livyServer + '/batches/' + id);\r\n    this.serverState = 'pending';\r\n    request.then(response => this.serverState = 'success', error => this.serverState = 'error');\r\n  }\r\n\r\n  killSession(id) {\r\n    let request = this.$http.delete(this.panel.livyServer + '/sessions/' + id);\r\n    this.serverState = 'pending';\r\n    request.then(response => this.serverState = 'success', error => this.serverState = 'error');\r\n  }\r\n\r\n  killFramework(id) {\r\n    let request = this.$http.post(this.panel.rmServer + '/master/teardown', \"frameworkId=\" + id);\r\n    this.serverState = 'pending';\r\n    request.then(response => this.serverState = 'success', error => this.serverState = 'error');\r\n  }\r\n}\r\n\r\nLivyCtrl.templateUrl = 'module.html';\r\n"]}